datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password        Password?
  AccountsOnUsers AccountsOnUsers[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Account {
  id              String                @id @default(cuid())
  type            String
  routingNumber   String
  currentBalance  Int                   @default(0)
  intDeposits     InternalTransaction[] @relation(name: "Deposits")
  intWithdrawls   InternalTransaction[] @relation(name: "Withdrawls")
  extTransactions ExternalTransaction[]
  AccountsOnUsers AccountsOnUsers[]
}

model InternalTransaction {
  account      Account      @relation(name: "Withdrawls", fields: [accountId], references: [id])
  accountId    String
  time         DateTime     @default(now())
  target       Account      @relation(name: "Deposits", fields: [targetId], references: [id])
  targetId     String
  amount       Int
  revertStatus RevertStatus

  @@id([accountId, time, targetId])
}

model ExternalTransaction {
  account         Account         @relation(fields: [accountId], references: [id])
  accountId       String
  time            DateTime        @default(now())
  externalAccount ExternalAccount @relation(fields: [externalId], references: [id])
  externalId      String
  amount          Int
  revertStatus    RevertStatus

  @@id([accountId, time, externalId])
}

model ExternalAccount {
  id                  String                @id @default(cuid())
  name                String
  routingNumber       String
  transitNumber       String
  ExternalTransaction ExternalTransaction[]
}

model AccountsOnUsers {
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  account   Account     @relation(fields: [accountId], references: [id])
  accountId String
  userPerms Permissions

  @@id([userId, accountId])
}

enum RevertStatus {
  NOT_REQUESTED
  REQUESTED
  REVERTED
  LOCKED
}

enum Permissions {
  VIEW
  DEPOSIT
  FULL_ACCESS
}
