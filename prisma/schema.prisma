datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int    @id @default(autoincrement())
  uid   String @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password        Password?
  AccountsOnUsers AccountsOnUsers[]
}

model Password {
  hash String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

model Account {
  id              Int               @id @default(autoincrement())
  uid             String            @default(cuid())
  type            String
  currentBalance  Int               @default(0)
  transactions    Transaction[]
  target          Target?           @relation(fields: [targetId], references: [id])
  targetId        Int?              @unique
  AccountsOnUsers AccountsOnUsers[]
}

model Transaction {
  id           Int          @id @default(autoincrement())
  uid          String       @default(cuid())
  account      Account      @relation(fields: [accountId], references: [id])
  accountId    Int
  time         DateTime     @default(now())
  target       Target       @relation(fields: [targetId], references: [id])
  targetId     Int
  amount       Int
  revertStatus RevertStatus
}

model Target {
  id            Int           @id @default(autoincrement())
  uid           String        @default(cuid())
  name          String
  routingNumber String
  transitNumber String
  account       Account?
  transactions  Transaction[]
}

model AccountsOnUsers {
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  account   Account     @relation(fields: [accountId], references: [id])
  accountId Int
  userPerms Permissions

  @@id([userId, accountId])
}

enum RevertStatus {
  NOT_REQUESTED
  REQUESTED
  REVERTED
  LOCKED
}

enum Permissions {
  VIEW
  DEPOSIT
  FULL_ACCESS
  OWNER
}
